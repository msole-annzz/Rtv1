#include "../includes/rt1.h"

void ft_put_pixel(t_scene *scene, double deep, double i, double j)
{
int p;
i = WIN_WIDTH/2 + i;
j = WIN_HEIGHT/2 - j - 1;


p = 4 * (WIN_WIDTH * j  + i);

if (deep == 0)
{
scene->image.data[p] =0x00;
scene->image.data[p+1] =0x00;
scene->image.data[p+2] =0x00;
}
else
{
scene->image.data[p] = 0x42 + (deep * 2.42);
scene->image.data[p+1] = 0x32 + (deep * 2.42);
scene->image.data[p+2] = 0x22 + (deep * 2.42);
}

}

void ft_init_scene(t_scene *scene)
{
scene->zoom=1;
scene->object.type = 10;
scene->object.R=10;
scene->object.center.x=0;
scene->object.center.y=0;
scene->object.center.z=15;
scene->camera.place.x=0;
scene->camera.place.y=0;
scene->camera.place.z=-25;
}

t_coord ft_substract_vector(t_coord v1,t_coord v2)
{
t_coord v3;
v3.x=v1.x-v2.x;
v3.y=v1.y-v2.y;
v3.z=v1.z-v2.z;
return(v3);
}

double ft_multiply_vector(t_coord v1,t_coord v2)
{
return (v1.x * v2.x + v1.y * v2.y + v1.z * v2.z);
}

int ft_crossobject(t_scene *scene)
{
double deep;
t_coord oc;
double d;
double x1;
double x2;
double a;
double b;
double c;
deep = 0;

//ищем пересечение луча scene->camera.place scene.cur_point и сферы scene->object
//это решение квадратного уравнения ax^2+bx+c=0
//D=V-O=scene.cur_point
//a=(D,D)
//b=2*(OC,D)
//c=(OC,OC)-r^2
//ищем дискриминант d=b^2-4ac 
//d<0  пересечений нет  
//d=0 1 пересечение
//d>0 2 пересечения (надо выбрать то которое ближе к камере и >1 и возвращаем его как deep)
//решение равно -b+-sqrt(d)/2a;
oc = ft_substract_vector(scene->camera.place, scene->object.center);

a = ft_multiply_vector(scene->cur_point,scene->cur_point);
printf("a=%f\n", a);
b = 2 * ft_multiply_vector(oc,scene->cur_point);
//printf("b=%f\n", b);
c = ft_multiply_vector(oc,oc) - (scene->object.R * scene->object.R);
//printf("c=%f\n", c);
d = b * b - 4 * a * c;
if (d>=0)
printf("d=%f\n", d);
if (d < 0)
deep = 0;
else
if (d >= 0)
{
x1 = -b + sqrt(d)/(2*a);
x2 = -b - sqrt(d)/(2*a);
deep = (x2 > x1) ? ((x1 > x2) ? x2 : ((x1 > 1) ? x1 : 0) ) : (x1 > 1 ? x1 : 0); 
}
 
return(deep);
}

void ft_conv2to3(int i, int j, t_scene *scene)
{
scene->cur_point.x= i*(double)VIEW_WIDTH/WIN_WIDTH;
scene->cur_point.y=j* (double)VIEW_HEIGHT/WIN_HEIGHT;
scene->cur_point.z=(double) scene->d;
//printf("x=%f\n", scene->cur_point.x);
//printf("y=%f\n", scene->cur_point.y);
}

int ft_raytrace(t_scene *scene)
{
double i;
double j;
//double deep;

i = - (double) WIN_WIDTH/2;
j = - (double) WIN_HEIGHT/2;
while (i <= (WIN_WIDTH/2 -1))
{
j=-WIN_HEIGHT/2;
while (j <= (WIN_HEIGHT/2 - 1))
{
//ft_conv2to3(i, j, scene); 
//deep = ft_crossobject(scene);
//printf("deep=%f\n", deep);
//printf ("i=%f\n", scene->cur_point.x);
//printf ("j=%f\n",scene->cur_point.y);
//ft_put_pixel(scene, deep, i, j);
j++;
}
i++;
}
printf("tratata1");
mlx_put_image_to_window(scene->mlx.init, scene->mlx.win,scene->mlx.img, 0, 0);
printf("tratata2");
return(0);
}


int scene_keys(int keycode , t_scene *scene)
{
if (keycode == KEY_ESCAPE)
        exit(0);
if (keycode == KEY_ANSI_A)
{
scene->zoom = scene->zoom - 1;
}
return(0);
}

int main(int argc, char **argv)
{
t_scene *scene;
if (argc == 2)
{
if (!(scene = (t_scene *)malloc(sizeof (t_scene))))
{
        exit(1);
}
if (ft_strequ(argv[1], "sfera"))
{
scene->mlx.init = mlx_init();
scene->mlx.win = mlx_new_window(scene->mlx.init,WIN_WIDTH, WIN_HEIGHT, "RT1");

scene->mlx.img = mlx_new_image(scene->mlx.init, WIN_WIDTH,WIN_HEIGHT);
scene->image.data = mlx_get_data_addr(scene->mlx.img,&scene->image.bpp, &scene->image.size, &scene->image.endian);
ft_init_scene(scene);
ft_raytrace(scene);
//ft_threads(fractol);
mlx_hook(scene->mlx.win, 2, 0, scene_keys, scene);
mlx_hook(scene->mlx.win, 6, 0, ft_raytrace, scene);
mlx_loop(scene->mlx.init);
}
}
else 
return(0);
}
